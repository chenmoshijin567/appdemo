// Generated by view binder compiler. Do not edit!
package com.example.myapplication.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.myapplication.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class UpdateLayoutBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button buttonupdate;

  @NonNull
  public final EditText editId;

  @NonNull
  public final EditText editName;

  @NonNull
  public final EditText editRank;

  @NonNull
  public final EditText editTreasuretools;

  private UpdateLayoutBinding(@NonNull ConstraintLayout rootView, @NonNull Button buttonupdate,
      @NonNull EditText editId, @NonNull EditText editName, @NonNull EditText editRank,
      @NonNull EditText editTreasuretools) {
    this.rootView = rootView;
    this.buttonupdate = buttonupdate;
    this.editId = editId;
    this.editName = editName;
    this.editRank = editRank;
    this.editTreasuretools = editTreasuretools;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static UpdateLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static UpdateLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.update_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static UpdateLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonupdate;
      Button buttonupdate = ViewBindings.findChildViewById(rootView, id);
      if (buttonupdate == null) {
        break missingId;
      }

      id = R.id.edit_id;
      EditText editId = ViewBindings.findChildViewById(rootView, id);
      if (editId == null) {
        break missingId;
      }

      id = R.id.edit_name;
      EditText editName = ViewBindings.findChildViewById(rootView, id);
      if (editName == null) {
        break missingId;
      }

      id = R.id.edit_rank;
      EditText editRank = ViewBindings.findChildViewById(rootView, id);
      if (editRank == null) {
        break missingId;
      }

      id = R.id.edit_Treasuretools;
      EditText editTreasuretools = ViewBindings.findChildViewById(rootView, id);
      if (editTreasuretools == null) {
        break missingId;
      }

      return new UpdateLayoutBinding((ConstraintLayout) rootView, buttonupdate, editId, editName,
          editRank, editTreasuretools);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
